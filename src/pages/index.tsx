import type { GetServerSideProps } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import type { Variants } from "framer-motion";
import { motion } from "framer-motion";

import { Check, PenNib } from "phosphor-react";

import { trpc } from "~/utils/trpc";

import { LevelBar } from "~/components/LevelBar";

import hypetiguerLogoImg from "~/assets/logo.svg";

const listVariants: Variants = {
  hidden: { opacity: 0, y: 100 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      delayChildren: 0.5,
      staggerChildren: 0.35,
      type: "keyframes",
    },
  },
};

const itemVariants: Variants = {
  hidden: {
    y: -50,
    opacity: 0,
  },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.5,
    },
  },
};

export default function Home() {
  const { data: quizzes } = trpc.useQuery(["quiz.getAll"]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto flex h-screen max-w-2xl flex-col py-24 px-2 text-zinc-600 sm:px-8">
        <motion.div
          initial={{
            opacity: 0,
          }}
          animate={{
            opacity: 1,
          }}
          transition={{
            duration: 2,
            ease: "easeOut",
          }}
          className="px-2 md:px-0"
        >
          <Image src={hypetiguerLogoImg} alt="" width={160} />

          <h2 className="mt-6 text-xl font-medium">
            Qual teste vocÃª quer realizar?
          </h2>

          <p className="mt-1 text-sm text-zinc-400">
            Inicie escolhendo um dos testes da lista abaixo
          </p>
        </motion.div>

        <div></div>

        <motion.ul
          variants={listVariants}
          initial="hidden"
          animate="visible"
          className="mt-8 w-full"
        >
          {quizzes?.map((quiz) => (
            <motion.li
              key={quiz.id}
              variants={itemVariants}
              className="w-full border-t border-zinc-200 text-gray-400 first:border-none"
            >
              <Link
                href="/quizzes/[slug]"
                as={`quizzes/${quiz.slug}`}
                className="flex w-full items-center justify-start gap-4 rounded-sm py-4 px-2 transition-all hover:opacity-80 focus:opacity-80 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-gray-100"
              >
                <>
                  <img
                    className="w-full max-w-[48px]"
                    src={quiz.imageUrl}
                    alt="Image course"
                  />

                  <div className="w-full max-w-[296px]">
                    <span className="text-lg font-semibold text-gray-800">
                      {quiz.title}
                    </span>
                    <div
                      className="text-sm leading-4 text-zinc-400"
                      dangerouslySetInnerHTML={{ __html: quiz.description }}
                    />
                  </div>

                  <div className="ml-2 md:ml-6">
                    <LevelBar level={quiz.level} />
                  </div>

                  <span className="ml-auto">
                    {quiz.published ? (
                      <span className="w-22 w-18 flex items-center justify-center gap-2 rounded-md bg-emerald-500 px-2 py-1 text-xs font-semibold text-gray-100">
                        <Check weight="bold" />
                        <span className="hidden md:block">Publicado</span>
                      </span>
                    ) : (
                      <span className="w-22 w-18 flex items-center justify-center gap-2 rounded-md bg-red-500 px-2 py-1 text-xs font-semibold text-gray-100">
                        <PenNib weight="fill" />
                        <span className="hidden md:block">Rascunho</span>
                      </span>
                    )}
                  </span>
                </>
              </Link>
            </motion.li>
          ))}
        </motion.ul>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
  return {
    props: {},
  };
};
