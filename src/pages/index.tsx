import { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import type { GetStaticProps } from "next";
import type { Quiz } from "@prisma/client";
import { motion } from "framer-motion";
import { Check, Moon, PenNib, Sun } from "phosphor-react";
import { useTheme } from "next-themes";
import * as RadioGroup from "@radix-ui/react-radio-group";

import { trpc } from "~/utils/trpc";
import { itemVariants, listVariants } from "~/utils/animation";
import { trpcSSG } from "~/server/trpc-ssg";

import { LevelBar } from "~/components/LevelBar";
import { Modal, ModalTitle, ModalTrigger, ModalWrapper, ModalX } from "~/components/Modal";
import { Button } from "~/components/Form/Button";

import hypetiguerLogoImg from "~/assets/logo.svg";
import hypetiguerLogoDarkImg from "~/assets/logodark.svg";
import { useSession } from "next-auth/react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const items = [
  {
    value: 1,
    memoji: "/very-sad.webp",
  },
  {
    value: 2,
    memoji: "/sad.webp",
  },
  {
    value: 3,
    memoji: "/ok.webp",
  },
  {
    value: 4,
    memoji: "/good.webp",
  },
  {
    value: 5,
    memoji: "/love.webp",
  },
];

const feedbackFormSchema = z.object({
  additionalInformation: z.string(),
  scoreFeedback: z.string(),
});

type FeedbackFormInputs = z.infer<typeof feedbackFormSchema>;

export default function Home() {
  const {
    register,
    handleSubmit,
    formState: { isSubmitting, errors },
    setValue,
  } = useForm<FeedbackFormInputs>({
    resolver: zodResolver(feedbackFormSchema),
  });

  console.log(setValue("scoreFeedback", "1"));

  const { data: session } = useSession();

  const { data: quizzes } = trpc.useQuery(["quiz.getAll"]);

  const { systemTheme, theme, setTheme } = useTheme();

  const currentTheme = theme === "system" ? systemTheme : theme;

  const { mutateAsync: sendFeedback } = trpc.useMutation([
    "feedback.sendFeedback",
  ]);

  async function onSendFeedback(data: FeedbackFormInputs) {
    console.log(data);
    if (session?.user) {
      await sendFeedback({
        additionalInformation: data.additionalInformation,
        score: Number(data.scoreFeedback),
        userId: session.user.id ?? "",
      });
    }
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto flex h-screen max-w-2xl flex-col py-24 px-2 text-zinc-600 sm:px-8">
        {currentTheme === "dark" ? (
          <button
            className="absolute top-2 right-2 flex h-10 w-10 items-center justify-center"
            onClick={() => setTheme("light")}
          >
            <Moon size={24} weight="fill" />
          </button>
        ) : (
          <button
            className="absolute top-2 right-2 flex h-10 w-10 items-center justify-center"
            onClick={() => setTheme("dark")}
          >
            <Sun size={24} weight="fill" />
          </button>
        )}

        <motion.div
          initial={{
            opacity: 0,
          }}
          animate={{
            opacity: 1,
          }}
          transition={{
            duration: 2,
            ease: "easeOut",
          }}
          className="px-2 md:px-0"
        >
          <Image
            src={
              currentTheme === "dark"
                ? hypetiguerLogoDarkImg
                : hypetiguerLogoImg
            }
            alt=""
            width={160}
          />

          <h2 className="mt-6 text-xl font-medium dark:text-gray-100">
            Qual teste você quer realizar?
          </h2>

          <p className="mt-1 text-sm text-zinc-400">
            Inicie escolhendo um dos testes da lista abaixo
          </p>
        </motion.div>

        <motion.ul
          variants={listVariants}
          initial="hidden"
          animate="visible"
          className="mt-8 w-full"
        >
          {quizzes?.map((quiz: Quiz) => (
            <motion.li
              key={quiz.id}
              variants={itemVariants}
              className="w-full border-t border-zinc-200 text-gray-400 first:border-none dark:border-zinc-800"
            >
              <Link
                href="/quizzes/[slug]"
                as={`quizzes/${quiz.slug}`}
                className="flex w-full items-center justify-start gap-4 rounded-sm py-4 px-2 transition-all hover:opacity-80 focus:opacity-80 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-gray-100"
              >
                <>
                  <img
                    className="w-full max-w-[48px]"
                    src={quiz.imageUrl}
                    alt="Image course"
                  />

                  <div className="w-full max-w-[296px]">
                    <span className="text-lg font-semibold text-zinc-800 dark:text-gray-100">
                      {quiz.title}
                    </span>
                    <div
                      className="text-sm leading-4 text-zinc-400"
                      dangerouslySetInnerHTML={{ __html: quiz.description }}
                    />
                  </div>

                  <div className="ml-2 md:ml-6">
                    <LevelBar level={quiz.level} />
                  </div>

                  <span className="ml-auto">
                    {quiz.published ? (
                      <span className="w-22 w-18 flex items-center justify-center gap-2 rounded-md bg-emerald-500 px-2 py-1 text-xs font-semibold text-gray-100">
                        <Check weight="bold" />
                        <span className="hidden md:block">Publicado</span>
                      </span>
                    ) : (
                      <span className="w-22 w-18 flex items-center justify-center gap-2 rounded-md bg-red-500 px-2 py-1 text-xs font-semibold text-gray-100">
                        <PenNib weight="fill" />
                        <span className="hidden md:block">Rascunho</span>
                      </span>
                    )}
                  </span>
                </>
              </Link>
            </motion.li>
          ))}
        </motion.ul>

        <Modal>
          <ModalTrigger asChild>
            <Button>Open</Button>
          </ModalTrigger>

          <ModalWrapper maintainDimensions>
            <ModalX />

            <h4 className="mt-4 text-zinc-500">Dê a sua opinião para nossa melhora</h4>

            <ModalTitle className="dark:text-zinc-200">
              Como está sendo a sua experiência com o Hypertiguer?
            </ModalTitle>

            <form onSubmit={handleSubmit(onSendFeedback)}>
              <RadioGroup.Root
                onValueChange={(scoreFeedbackValue) =>
                  setValue("scoreFeedback", scoreFeedbackValue)
                }
              >
                {items.map((item) => (
                  <RadioGroup.Item
                    className="relative focus:ring-2 focus:ring-indigo-600 outline-none rounded-sm"
                    key={item.value}
                    value={String(item.value)}
                  >
                    <img
                      src={item.memoji}
                      alt="memoji"
                      className="w-20 opacity-70 brightness-50"
                    />
                    <RadioGroup.Indicator className="absolute top-0 left-0 transition-all ">
                      <motion.img
                        initial={{
                          opacity: 0,
                        }}
                        animate={{
                          opacity: 1,
                        }}
                        transition={{ duration: 0.1, type: "spring" }}
                        src={item.memoji}
                        alt="memoji"
                        className="w-20 drop-shadow-2xl transition-all"
                      />
                    </RadioGroup.Indicator>
                  </RadioGroup.Item>
                ))}
              </RadioGroup.Root>

              {/* <span className="mb-5 font-semibold">
                {watch("scoreFeedback") === "1" && (
                  <span className="mb-5 font-semibold text-red-500">
                    Tá péssima!
                  </span>
                )}
                {watch("scoreFeedback") === "2" && (
                  <span className="mb-5 font-semibold text-amber-600">
                    Nada legal.
                  </span>
                )}
                {watch("scoreFeedback") === "3" && (
                  <span className="mb-5 font-semibold text-amber-400">
                    Aceitável.
                  </span>
                )}
                {watch("scoreFeedback") === "4" && (
                  <span className="text-emerald-400">Muito boa!</span>
                )}
                {watch("scoreFeedback") === "5" && (
                  <span className="mb-5 font-semibold text-emerald-400">
                    Realmente incrível!
                  </span>
                )}
              </span> */}

              <hr className="mb-4 w-full border-t border-zinc-300 dark:border-zinc-700" />

              <span className="text-zinc-500">Quanto mais informações, mais conseguimos evoluir</span>

              <textarea
                {...register("additionalInformation")}
                className="border-zinc mt-4 min-h-[120px] w-full resize-none rounded-md border dark:text-zinc-300 dark:border-zinc-700 border-zinc-200 dark:bg-zinc-800 bg-gray-200 py-1 px-2 text-sm text-gray-900 shadow-sm outline-none placeholder:text-gray-400 focus:ring-2 focus:ring-indigo-600 disabled:cursor-not-allowed disabled:opacity-50"
              />

              <Button
                type="submit"
                className="mt-6 w-52"
                isLoading={isSubmitting}
              >
                Enviar feedback
              </Button>
            </form>
          </ModalWrapper>
        </Modal>
      </main>
    </>
  );
}

export const getStaticProps: GetStaticProps = async () => {
  await trpcSSG.prefetchQuery("quiz.getAll");

  return {
    props: {
      trpcState: trpcSSG.dehydrate(),
    },
    revalidate: 60 * 60 * 2, // 2 hours
  };
};
