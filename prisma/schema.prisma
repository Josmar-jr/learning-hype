// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum CourseLevel {
  BEGINNER
  MIDDLE
  ADVANCED
}

model Question {
  id          String @id @default(cuid())
  description String @db.Text
  score       Int

  createdAt                DateTime                   @default(now())
  answers                  Answer[]
  Quiz                     Quiz?                      @relation(fields: [quizId], references: [id])
  quizId                   String?
  submissionQuestionAnswer SubmissionQuestionAnswer[]

  @@map("questions")
}

model Course {
  id          String      @id @default(cuid())
  title       String      @db.Text
  description String      @db.Text
  imageUrl    String
  slug        String      @unique
  difficulty  CourseLevel @default(BEGINNER)
  createdAt   DateTime    @default(now())

  quizzes Quiz[]
}

model Quiz {
  id          String @id @default(cuid())
  title       String @db.Text
  description String @db.Text
  imageUrl    String
  slug        String @unique

  questions   Question[]
  submissions Submission[]

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id])
}

model Answer {
  id            String  @id @default(cuid())
  questionId    String
  description   String  @db.Text
  isRightAnswer Boolean @default(false)

  question                 Question                   @relation(fields: [questionId], references: [id])
  submissionQuestionAnswer SubmissionQuestionAnswer[]
}

model Submission {
  id             String    @id @default(cuid())
  userId         String?
  sessionId      String?
  quizId         String
  result         Int?
  gaveUpAt       DateTime?
  finishedAt     DateTime?
  reportViewedAt DateTime?
  createdAt      DateTime  @default(now())

  quiz Quiz  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id])

  questionAnswers SubmissionQuestionAnswer[]
}

model SubmissionQuestionAnswer {
  id           String    @id @default(cuid())
  submissionId String
  questionId   String
  answerId     String?
  answered     Boolean   @default(false)
  answeredAt   DateTime?
  createdAt    DateTime  @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id])
  answer     Answer?    @relation(fields: [answerId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  submissions   Submission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
